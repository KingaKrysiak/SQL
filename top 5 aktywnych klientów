Zapytanie służy do analizy aktywności klientów sklepu internetowego w określonym przedziale czasowym (rok 2024). Celem jest wyłonienie pięciu najbardziej aktywnych klientów na literę K, którzy złożyli co najmniej trzy zamówienia, oraz prezentacja dodatkowych informacji o ich zamówieniach i preferencjach produktowych.
W zapytaniu wykorzystano:
INNER JOIN do połączenia klientów z ich zamówieniami oraz szczegółami tych zamówień,
LEFT JOIN do dołączenia informacji o produktach i ich kategoriach, pozwalając na uwzględnienie wszystkich zamówień, nawet jeśli niektóre produkty nie mają przypisanej kategorii,
filtrację zamówień z 2024 roku za pomocą WHERE z warunkiem BETWEEN na daty,
selekcję klientów o statusie 'active' lub 'premium' za pomocą IN,
wyszukiwanie klientów, których nazwa zaczyna się na literę "K" dzięki operatorowi LIKE,
agregację danych według klienta i kategorii produktów z zastosowaniem GROUP BY,
liczenie unikalnych zamówień klienta za pomocą COUNT(DISTINCT) oraz wyliczenie średniej wartości zamówienia przez AVG,
filtrowanie wyników na podstawie liczby zamówień (minimum 3) przy użyciu HAVING,
sortowanie wyników malejąco według liczby zamówień oraz średniej wartości zamówienia przez ORDER BY,
ograniczenie liczby wyników do top 5 przy pomocy LIMIT.
Takie zapytanie pokazuje moje umiejętności w łączeniu i filtrowaniu danych, pracy z agregatami, warunkami oraz organizacji wyników — wszystko niezbędne w analizie biznesowej i raportowaniu danych.


SELECT
c.customer_id AS klient_id,
c.customer_name AS klient,
COUNT(DISTINCT o.order_id) AS liczba_zamowien,
AVG(o.total_amount) AS srednia_wartosc_zamowienia,
cat.category_name AS kategoria_produktow
FROM
customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
INNER JOIN order_items oi ON o.order_id = oi.order_id
LEFT JOIN products p ON oi.product_id = p.product_id
LEFT JOIN categories cat ON p.category_id = cat.category_id
WHERE
o.order_date BETWEEN '2024-01-01' AND '2024-12-31'
AND c.customer_status IN ('active', 'premium')
AND c.customer_name LIKE 'K%'
GROUP BY
c.customer_id,
c.customer_name,
cat.category_name
HAVING
COUNT(DISTINCT o.order_id) > 2
ORDER BY
liczba_zamowien DESC,
srednia_wartosc_zamowienia DESC
LIMIT 5;
